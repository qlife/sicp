#lang sicp

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

;;; 1024
;;; 65536
;;; 65536

;;; (f n) -> 2n

;;; (g n)
;;; (A 1 n)
;;; (A 0 (A 1 (- n 1)))
;;; (A 0 (A 0 (A 0 (- n 2)))) ;;; ...
;;; (A 0 (A 0 ... (A 0 1))...)
;;; (g n) -> 2^n

;;; (h n)
;;; (A 2 2)-> (A 1 (A 2 1)) -> (A 1 2) -> (A 0 (A 1 1))
;;; (A 2 2) -> 4
;;; (A 2 3) -> (A 1 (A 2 2)) -> (A 1 (A 1 (A 2 1))) ->
;;; (A 1 (A 1 2)) -> (A 1 4) -> 16
;;; (A 2 4) -> (A 1 (A 2 3)) -> (A 1 (A 1 (A 2 2)))
;;; -> (A 1 (A 1 (A 1 (A 2 1)))
;;;
;;; Assume is apply square
;;; h(n) = 2^2^2...{h times}2^n